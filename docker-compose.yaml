version: "3.8"

services:
  cassandra-node-1:
    image: cassandra:latest
    container_name: cassandra-node-1
    environment:
      - CASSANDRA_CLUSTER_NAME=FeedbackCluster
    ports:
      - "9042:9042"
    networks:
      - cassandra-network
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'DESCRIBE keyspaces;'"]
      interval: 5s
      timeout: 3s
      retries: 25

  cassandra-node-2:
    image: cassandra:latest
    container_name: cassandra-node-2
    depends_on:
      cassandra-node-1:
        condition: service_healthy
    environment:
      - CASSANDRA_SEEDS=cassandra-node-1
      - CASSANDRA_CLUSTER_NAME=FeedbackCluster
    networks:
      - cassandra-network

  feedback-ddl:
    image: feedback-ddl
    build:
      context: .
      dockerfile: feedback_service/data_access/tables_creation/Dockerfile
    volumes:
      - ./feedback_service/data_access/tables_creation:/code
    environment:
      PORT: "9042"
      CASSANDRA_SEEDS: "cassandra-node-1"
    networks:
      - cassandra-network
    depends_on:
      cassandra-node-1:
        condition: service_healthy

  feedback-service:
    image: feedback-service
    build:
      context: .
      dockerfile: feedback_service/Dockerfile
    environment:
      PORT: "8080"
      CASSANDRA_PORT: "9042"
      CASSANDRA_SEEDS: "cassandra-node-1"
    ports:
      - "8080:8080"
    volumes:
      - .:/code
    networks:
      - cassandra-network
      - services-network
    depends_on:
      feedback-ddl:
        condition: service_completed_successfully


  postgres-db:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_PASSWORD: mock
      POSTGRES_DB: postgres
    volumes:
      - ./user_service/data_access/postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 1s
      retries: 10
    networks:
      - postgres-network

  postgres-init:
    image: postgres:latest
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      PGPASSWORD: "mock"
    volumes:
      - ./user_service/data_access/init.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      [
        "psql",
        "-h",
        "postgres-db",
        "-U",
        "postgres",
        "-d",
        "postgres",
        "-a",
        "-f",
        "/docker-entrypoint-initdb.d/init.sql",
      ]
    networks:
      - postgres-network

  user-service:
    build:
      context: .
      dockerfile: user_service/Dockerfile
    depends_on:
      postgres-init:
        condition: service_completed_successfully
    volumes:
      - .:/code
    environment:
      DB_HOST: postgres-db
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: mock

      PORT: 8180
    ports:
      - "8180:8180"
    networks:
      - postgres-network
      - services-network


networks:
  services-network:
    driver: bridge
    name: services-network
  cassandra-network:
    driver: bridge
    name: cassandra-network
  postgres-network:
    driver: bridge
    name: postgres-network
