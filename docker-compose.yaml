version: "3.8"

x-consul-env: &consul-env
  CONSUL_HOST: "${CONSUL_HOST}"
  CONSUL_PORT: "${CONSUL_PORT}"

x-hz-common-settings: &hz-common-settings
  image: hazelcast/hazelcast:latest
  networks:
    - hazelcast-network

x-common-env: &hz-common-env
  HZ_CLUSTERNAME: dev

x-healthcheck: &healthcheck
  healthcheck:
    test:
      [
        "CMD",
        "curl",
        "-f",
        "http://localhost:${INTERNAL_HZ_PORT}/hazelcast/health/node-state",
      ]
    interval: 3s
    timeout: 1s
    retries: 15
    start_period: 5s

services:
  cassandra-node-1:
    image: cassandra:latest
    container_name: cassandra-node-1
    environment:
      - CASSANDRA_SEEDS=${CASSANDRA_SEEDS}
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
    ports:
      - "9042:${CASSANDRA_PORT}"
    networks:
      - cassandra-network
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'DESCRIBE keyspaces;'"]
      interval: 5s
      timeout: 3s
      retries: 25

  cassandra-node-2:
    image: cassandra:latest
    container_name: cassandra-node-2
    depends_on:
      cassandra-node-1:
        condition: service_healthy
    environment:
      - CASSANDRA_SEEDS=${CASSANDRA_SEEDS}
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
    networks:
      - cassandra-network

  feedback-ddl:
    image: feedback-ddl
    build:
      context: .
      dockerfile: feedback_service/data_access/tables_creation/Dockerfile
    volumes:
      - ./feedback_service/data_access/tables_creation:/code
    environment:
      PORT: "${CASSANDRA_PORT}"
      CASSANDRA_SEEDS: ${CASSANDRA_SEEDS}
    networks:
      - cassandra-network
    depends_on:
      cassandra-node-1:
        condition: service_healthy

  feedback-service:
    image: feedback-service
    build:
      context: .
      dockerfile: feedback_service/Dockerfile
    environment:
      PORT: "${FEEDBACK_SERVICE_PORT}"
      CASSANDRA_PORT: "${CASSANDRA_PORT}"
      CASSANDRA_SEEDS: ${CASSANDRA_SEEDS}
    ports:
      - "8080:${FEEDBACK_SERVICE_PORT}"
    volumes:
      - .:/code
    networks:
      - cassandra-network
      - services-network
    depends_on:
      consul:
        condition: service_healthy
      feedback-ddl:
        condition: service_completed_successfully

  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    ports:
      - "27017:27017"
    networks:
      - services-network

  hazel-node-1:
    <<: *hz-common-settings
    container_name: hazel-node-1
    environment:
      <<: *hz-common-env
      HZ_NETWORK_PUBLICADDRESS: "hazel-node-1:${INTERNAL_HZ_PORT}"
    ports:
      - "5701:${INTERNAL_HZ_PORT}"
    <<: *healthcheck

  hazel-node-2:
    <<: *hz-common-settings
    container_name: hazel-node-2
    environment:
      <<: *hz-common-env
      HZ_NETWORK_PUBLICADDRESS: "hazel-node-2:${INTERNAL_HZ_PORT}"
    ports:
      - "5702:${INTERNAL_HZ_PORT}"
    depends_on:
      hazel-node-1:
        condition: service_healthy
    <<: *healthcheck

  course-service:
    container_name: course-service
    build:
      context: .
      dockerfile: CourseService/Dockerfile
    image: course-service
    environment:
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      PYTHONPATH: /app
      HAZELCAST_CLUSTER_NAME: ${HZ_CLUSTER_NAME}
      HAZELCAST_ADDRESSES: "hazel-node-1:${INTERNAL_HZ_PORT},hazel-node-2:${INTERNAL_HZ_PORT}"

      PORT: ${COURSE_SERVICE_PORT}
    ports:
      - "8001:${COURSE_SERVICE_PORT}"

    volumes:
      - .:/app
    depends_on:
      consul:
        condition: service_healthy
      mongodb:
        condition: service_started
      hazel-node-1:
        condition: service_healthy
      hazel-node-2:
        condition: service_healthy
    networks:
      - services-network
      - hazelcast-network

  entry-endpoint:
    container_name: entry-endpoint
    build:
      context: .
      dockerfile: EntryEndpoint/Dockerfile
    environment:
      - MONGO_USERNAME=admin
      - MONGO_PASSWORD=password
      - PYTHONPATH=/app
      - HAZELCAST_CLUSTER_NAME="dev"
      - HAZELCAST_ADDRESSES="hazel-node-1:5701,hazel-node-2:5701"
      - PORT=${ENTRYPOINT_PORT}
    ports:
      - "8000:${ENTRYPOINT_PORT}"
    volumes:
      - .:/app
    depends_on:
      consul:
        condition: service_healthy
      mongodb:
        condition: service_started
      course-service:
        condition: service_healthy
    networks:
      - services-network

  postgres-db:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_DB: postgres

      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - ./user_service/data_access/postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 3s
      timeout: 1s
      retries: 10
    networks:
      - postgres-network

  postgres-init:
    image: postgres:latest
    depends_on:
      postgres-db:
        condition: service_healthy
    environment:
      PGPASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - ./user_service/data_access/init.sql:/docker-entrypoint-initdb.d/init.sql
    command:
      [
        "psql",
        "-h",
        "${POSTGRES_HOST}",
        "-U",
        "${POSTGRES_USER}",
        "-d",
        "postgres",
        "-a",
        "-f",
        "/docker-entrypoint-initdb.d/init.sql",
      ]
    networks:
      - postgres-network

  user-service:
    build:
      context: .
      dockerfile: user_service/Dockerfile
    depends_on:
      postgres-init:
        condition: service_completed_successfully
      consul:
        condition: service_healthy
    volumes:
      - .:/code
    environment:
      DB_HOST: ${POSTGRES_HOST}
      DB_NAME: postgres
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}

      PORT: ${USER_SERVICE_PORT}
    ports:
      - "8180:${USER_SERVICE_PORT}"
    networks:
      - postgres-network
      - services-network

  consul:
    image: hashicorp/consul:latest
    command: "/bin/sh -c 'sh /consul-population.sh'"
    container_name: consul-server
    volumes:
      - ./consul-population.sh:/consul-population.sh
    ports:
      - "${CONSUL_PORT}:${CONSUL_PORT}"
      - "8600:8600/udp"
    networks:
      - services-network
    environment:
      CONSUL_ESSENTIAL_KEY: "${CONSUL_ESSENTIAL_KEY}"
      CONSUL_PORT: "${CONSUL_PORT}"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${CONSUL_PORT}/v1/kv/${CONSUL_ESSENTIAL_KEY}",
        ]
      interval: 5s
      timeout: 1s
      retries: 3

networks:
  services-network:
    driver: bridge
    name: services-network
  hazelcast-network:
    driver: bridge
    name: hazelcast-network
  cassandra-network:
    driver: bridge
    name: cassandra-network
  postgres-network:
    driver: bridge
    name: postgres-network
